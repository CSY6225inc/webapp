name: Build Packer Workflow

on:
  push:
    branches:
      - main

env:
  PRODUCT_VERSION: "1.10.0" 

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16  # Specify your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Install PostgreSQL
        run: |
          echo "Installing PostgreSQL"
          sudo apt-get update -y
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Configure PostgreSQL without systemd
        run: |
          echo "Starting PostgreSQL manually"
          sudo service postgresql start

      - name: Update database password
        run: |
          echo "Updating database password"
          sudo -u postgres psql -c "ALTER USER ${{secrets.DB_USER}} WITH PASSWORD '${{secrets.DB_PASSWORD}}';"

      - name: Run tests
        run: npm test 
        
  build-machine-image:
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      ami_id: ${{ steps.extract_aws_packer_outputs.outputs.ami_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set Packer GitHub API Token
        run: echo "PACKER_GITHUB_API_TOKEN=${{ secrets.PACKER_GITHUB_API_TOKEN }}" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          aws_region=${{ secrets.AWS_REGION }}
          aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}
          DB_DIALECT=${{ secrets.DB_DIALECT }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          PORT=${{ secrets.PORT }}
          EOF
        shell: bash

      - name: Zip project artifact
        run: zip -r webapp-fork.zip . 
        working-directory: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Authenticate with Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v2
      #   with:
      #     project_id: ${{ secrets.GCP_PROJECT_ID }}
      #     install_components: 'beta,gsutil'

      # - name: Save Google Cloud Credentials to File
      #   run: |
      #     echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $HOME/gcp-key.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json" >> $GITHUB_ENV
      #   shell: bash

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"

      - name: Run Packer Init
        working-directory: packer
        run: packer init .

      - name: Run Packer Format (Recursive)
        working-directory: packer
        run: packer fmt -recursive .

      - name: Run Packer Validate
        working-directory: packer
        run: packer validate .

      - name: Build Image with Packer (AWS & GCP)
        working-directory: packer
        run: |
          packer build --force \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
            -var "aws_profile=${{ secrets.AWS_PROFILE }}" \
            -var "ssh_username=${{ secrets.SSH_USERNAME }}" \
            -var "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            -var "DB_NAME=${{ secrets.DB_NAME }}" \
            -var "DB_USER=${{ secrets.DB_USER }}" \
            -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "gcp_zone=${{ secrets.GCP_ZONE }}" \
            -var "gcp_source_image_family=${{ secrets.GCP_SOURCE_IMAGE_FAMILY }}" \
            -var "gcp_image_name=${{ secrets.GCP_IMAGE_NAME }}" \
            -var "gcp_image_family=${{ secrets.GCP_IMAGE_FAMILY }}" \
            -var "gcp_machine_type=${{ secrets.GCP_MACHINE_TYPE }}" \
            -var "application_artifact_path=../webapp-fork.zip" \
            . | tee $HOME/pkrbuild_output.log

      - name: Extract AMI ID 
        id: extract_aws_packer_outputs
        run: |
          AMI_ID=$(grep -oP 'ami-[a-f0-9]{17}' $HOME/pkrbuild_output.log | tail -1)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      # - name: Extract GCP Image Name
      #   id: extract_gcp_packer_outputs
      #   run: |
      #     GCP_IMAGE_NAME=$(grep -oP "A disk image was created.*?: \K(.+)" $HOME/pkrbuild_output.log | tail -1)
      #     echo "GCP_IMAGE_NAME=$GCP_IMAGE_NAME" >> $GITHUB_ENV
      
      - name: Share AWS AMI with Demo AWS Account
        if: env.AMI_ID != ''
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.AMI_ID }} \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_AWS_ACCOUNT_ID }}}]" \
            --region ${{ secrets.AWS_REGION }}

      # - name: Share GCP Image with Demo Project
      #   if: env.GCP_IMAGE_NAME != ''
      #   run: |
      #     gcloud compute images add-iam-policy-binding ${{ env.GCP_IMAGE_NAME }} \
      #       --project=${{ secrets.GCP_PROJECT_ID }} \
      #       --member=serviceAccount:${{ secrets.DEMO_GCP_PROJECT_NUMBER }}@cloudservices.gserviceaccount.com \
      #       --role=roles/compute.imageUser
  perform-continous-deployment:
    needs: build-machine-image
    runs-on: ubuntu-latest
    env:
      AMI_ID: ${{ needs.build-machine-image.outputs.ami_id }}
      DEMO_ASG: csye6225_asg
      TEMPLATE_NAME: webapp-launch-template

    steps:
      - name: Fetch latest codebase
        uses: actions/checkout@v4

      - name: Set up AWS DEMO credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: '${{ secrets.DEMO_AWS_ACCOUNT_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: Generate new template version
        id: generate_template
        run: |
          echo "Using AMI with ID: $AMI_ID for launch template update..."

          TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $TEMPLATE_NAME \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "Generated template version: $TEMPLATE_VERSION"
          echo "template_version=$TEMPLATE_VERSION" >> $GITHUB_OUTPUT

      - name: Update ASG with new version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $DEMO_ASG \
            --launch-template "LaunchTemplateName=$TEMPLATE_NAME,Version=${{ steps.generate_template.outputs.template_version }}"

      - name: Trigger ASG instance refresh
        id: refresh_trigger
        run: |
          REFRESH_TOKEN=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $DEMO_ASG \
            --preferences '{"MinHealthyPercentage":90,"InstanceWarmup":60}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "Started instance refresh with ID: $REFRESH_TOKEN"
          echo "refresh_id=$REFRESH_TOKEN" >> $GITHUB_OUTPUT

      - name: Monitor refresh progress
        run: |
          REFRESH_TOKEN=${{ steps.refresh_trigger.outputs.refresh_id }}
          echo "Monitoring instance refresh ID: $REFRESH_TOKEN"
          CURRENT_STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $DEMO_ASG \
            --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_TOKEN'].Status" \
            --output text)

          echo "Initial status: $CURRENT_STATUS"

          for attempt in {1..20}; do
            CURRENT_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $DEMO_ASG \
              --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_TOKEN'].Status" \
              --output text)

            echo "Attempt $attempt: Status - $CURRENT_STATUS"

            if [[ "$CURRENT_STATUS" == "Successful" || "$CURRENT_STATUS" == "Failed" ]]; then
              echo "Instance refresh completed with status: $CURRENT_STATUS"
              break
            fi

            echo "Waiting for 30 seconds before checking again..."
            sleep 30
          done
          